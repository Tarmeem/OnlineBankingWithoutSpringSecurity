package com.onlinebanking.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.onlinebanking.entity.Account;
import com.onlinebanking.entity.Customer;
import com.onlinebanking.entity.PaymentTransferForm;
import com.onlinebanking.entity.Transaction;
import com.onlinebanking.service.AccountService;
import com.onlinebanking.service.CustomerService;
import com.onlinebanking.service.TransactionService;

@Controller
public class HomeContoller {

    @Autowired
    private CustomerService customerService;

    @Autowired
    private AccountService accountService;

    @Autowired
    private TransactionService transactionService;

    @GetMapping("/login")
    public String home() {
        return "login";
    }

    @GetMapping("/welcome")
    public String showWelcomePage(Model model, HttpSession session) {
        String username = session.getAttribute("username").toString();
        // ... (other logic)
        System.out.println(username);
        if (username != null) {
            model.addAttribute("username", username);
        }

        // ... (other logic)
        return "welcome";
    }

    @PostMapping("/welcome")
    public String validateCustomer(@ModelAttribute("customer") Customer customer,
            RedirectAttributes redirectAttributes, HttpSession session) {
        String username = customer.getCustomerName();
        String password = customer.getCustomerPassword();
        Customer cust = customerService.getCustomerByUsernameAndPassword(username, password);

        if (cust != null) {
            // redirectAttributes.addAttribute("username", username); // Add username as a
            // URL parameter
            session.setAttribute("username", username);
            return "redirect:/welcome";
        }

        return "login";
    }

    @GetMapping("/register")
    public String register(Model m) {
        m.addAttribute("nameExists", false);
        m.addAttribute("emailExists", false);
        m.addAttribute("phoneNoExists", false);

        return "register";
    }

    @PostMapping("/register")
    public String registerCustomer(@ModelAttribute("customer") Customer cust, Model model) {
        if (customerService.doesNameExist(cust.getCustomerName())) {
            model.addAttribute("nameExists", true);
            return "register";

        } else if (customerService.doesEmailExist(cust.getCustomerEmail())) {
            model.addAttribute("emailExists", true);
            return "register";
        } else if (customerService.doesPhoneNumberExist(cust.getPhoneNo())) {
            model.addAttribute("phoneNoExists", true);
            return "register";
        }
        System.out.print(cust);
        customerService.addCustomer(cust);
        return "redirect:register?success";
    }

    @GetMapping("/AccountDetails1")
    public String showAccountDetails(Model model, HttpSession session) {
        String username = session.getAttribute("username").toString();
        System.out.println(username);
        Customer customer = customerService.getCustomerByUsername(username);
        // System.out.println(customer);
        if (customer != null) {
            List<Account> accounts = accountService.getAllAccountById(customer.getCustomerId());
            model.addAttribute("accounts", accounts);
            return "AccountDetails";
        }
        // Handle case where customer is not found
        // You might want to redirect to an error page or show a message
        return "";

    }

    @GetMapping("/createaccount")
    public String AccountForm() {
        return "createAccount";
    }

    @PostMapping("/createaccount")
    public String createAccount(@ModelAttribute("account") Account account, HttpSession session,
            RedirectAttributes redirectAttributes) {
        String username = session.getAttribute("username").toString();
        System.out.println(username);
        Customer customer = customerService.getCustomerByUsername(username);
        System.out.println(customer);

        // if (customer != null && customer.getAccount()) {
        // account.setCustomer(customer); // Set the customer for the account
        // accountService.createAccount(account);
        // redirectAttributes.addFlashAttribute("accountCreated", true);
        // return "redirect:/welcome";
        // } else {
        // // Handle case where customer is not found
        // // You might want to redirect to an error page or show a message
        // return "";
        // }
        if (customer != null) {
            List<Account> accList = customer.getAccount();
            int currentAccountCount = 0;
            int savingsAccountCount = 0;

            for (Account acc : accList) {
                if (acc.getAccountType().equalsIgnoreCase("current")) {
                    currentAccountCount++;

                } else if (acc.getAccountType().equalsIgnoreCase("savings")) {
                    savingsAccountCount++;
                }
            }
            System.out.println(accList);

            if ((currentAccountCount < 1 && account.getAccountType().equalsIgnoreCase("current")) ||
                    (savingsAccountCount < 1 && account.getAccountType().equalsIgnoreCase("savings"))) {

                account.setCustomer(customer); // Set the customer for the account
                accountService.createAccount(account);
                redirectAttributes.addFlashAttribute("accountCreated", true);
                return "redirect:/welcome";
            } else {

                return "redirect:/error";
            }
        } else {

            return "redirect:/login";
        }
    }

    @GetMapping("/payment-transfer")
    public String showPaymentTransferForm(Model model) {
        // Fetch accounts and populate dropdown options
        List<Account> sourceAccounts = accountService.getAllAccounts();
        List<Account> targetAccounts = accountService.getAllAccounts();

        model.addAttribute("sourceAccounts", sourceAccounts);
        model.addAttribute("targetAccounts", targetAccounts);

        // Create a model attribute for the payment transfer form
        model.addAttribute("transferForm", new PaymentTransferForm());

        return "payment-transfer";
    }

    @PostMapping("/payment-transfer")
    public String transferAmount(@ModelAttribute("transferForm") PaymentTransferForm transferForm,
            Model model) {
        // Get source and target account IDs from the form
        Long sourceAccountId = transferForm.getSourceAccountId();
        Long targetAccountId = transferForm.getTargetAccountId();

        // Get amount from the form
        Double amount = transferForm.getAmount();

        if (sourceAccountId.equals(targetAccountId)) {
            model.addAttribute("errorOccurred", true);
            return "payment-transfer";
        }

        // Perform the transfer logic using accountService
        accountService.transferMoney(sourceAccountId, targetAccountId, amount);

        model.addAttribute("successOccurred", true);

        // Redirect back to payment-transfer with a success message
        return "redirect:/payment-transfer?success";
    }

    @GetMapping("/transaction-history")
    public String showTransactionHistory(@RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size, Model model, HttpSession session) {
        String username = session.getAttribute("username").toString();
        Customer customer = customerService.getCustomerByUsername(username);

        if (customer != null) {
            Pageable pageable = PageRequest.of(page, size, Sort.by("timestamp").descending());
            Page<Transaction> transactionsPage = transactionService
                    .getTransactionsByCustomerId(customer.getCustomerId(), pageable);
            // List<Transaction> transactions = transactionService.getTransactionsByCustomerId(customer.getCustomerId());
            model.addAttribute("transactions", transactionsPage.getContent());
            model.addAttribute("totalPages", transactionsPage.getTotalPages());
            model.addAttribute("currentPage", page);    
            return "transaction-history";
        }

        // Handle case where customer is not found
        // You might want to redirect to an error page or show a message
        return "redirect:/login"; // Or any other appropriate action
    }

}
""
public List<Transaction> findByAccount_Customer_CustomerIdOrderByTimestampDesc(Long customerId);

""
package com.onlinebanking.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.onlinebanking.entity.Account;
import com.onlinebanking.entity.Transaction;
import com.onlinebanking.entity.Transactiontype;
import com.onlinebanking.exception.ResourceNotFoundException;
import com.onlinebanking.repository.AccountRepo;
import com.onlinebanking.repository.TransactionRepo;

@Service
public class TransactionService {
	
	@Autowired
	private TransactionRepo transactionrepo;
	
	@Autowired
	private AccountRepo accountRepo;
	
	public Transaction saveTransaction(Transaction t) {
		return transactionrepo.save(t);
	}
	
	//  get all transactions by id for a account
	public List<Transaction> getAllTransactions( Long Ai){
		Optional<Account> account = accountRepo.findById(Ai);
		if(account.isPresent())
			return transactionrepo.findByAccountAccountId(Ai);
		else
			throw new ResourceNotFoundException("Id does not exists.");
	}
	
	// get transaction By trns id
	public Transaction getTransactionByTid(Long tid)
	{
		return transactionrepo.findById(tid).orElseThrow(()->new ResourceNotFoundException("Id does not exists."));
	}
	
	// get Total transaction amount
	public Double getTotalTransactionAmount(Long aid) {
		List<Transaction> t = transactionrepo.findByAccountAccountId(aid);
		
		if(t.isEmpty())
			throw new ResourceNotFoundException("Id does not exists.");
		
		Double d = 0.0;
		for(Transaction t1 : t)
		{
			if(t1.getType().equals(Transactiontype.DEPOSIT))
				d+=t1.getAmount();
			else if (t1.getType().equals(Transactiontype.WITHDRAW))
				d-=t1.getAmount();
		}
		return d;
	}

	public List<Transaction> getTransactionsByCustomerId(Long customerId) {
		return transactionrepo.findByAccount_Customer_CustomerIdOrderByTimestampDesc(customerId);
	}
	 public Page<Transaction> getTransactionsByCustomerId(Long customerId, Pageable pageable) {
        return transactionrepo.findByAccount_Customer_CustomerIdOrderByTimestampDesc(customerId, pageable);
    }

}

""
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org">

    <head>
        <title>Payment Transfer</title>
        <!-- Add your CSS styling here -->
    </head>

    <body>
        <div class="navbar">
            <!-- Your navigation bar links and profile info -->
        </div>

        <div class="container">
            <div th:if="${errorOccurred}" class="alert alert-error">
                Transfer failed: Source and target accounts cannot be the same.
            </div>
            <div th:if = "${param.success}"><div class="alert">Transfer Successful.</div></div>
            <h2>Payment Transfer</h2>
            <form th:action="@{/payment-transfer}" method="post">
                <label for="sourceAccount">Source Account:</label>
                <select id="sourceAccount" name="sourceAccountId">
                    <option th:each="account : ${sourceAccounts}" th:value="${account.accountId}"
                        th:text="${account.accountNumber}"></option>
                </select>

                <label for="targetAccount">Target Account:</label>
                <select id="targetAccount" name="targetAccountId">
                    <option th:each="account : ${targetAccounts}" th:value="${account.accountId}"
                        th:text="${account.accountNumber}"></option>
                </select>

                <label for="amount">Amount:</label>
                <input type="number" id="amount" name="amount" required />

                <button type="submit">Transfer</button>
            </form>
        </div>
        <button><a th:href="@{/welcome}">Back</a></button>
    </body>

    </html>
""
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"></html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error</title>
</head>
<body>
    <p>Error occored cause account already exists(savings/current)</p>
    <button><a th:href="@{/welcome}">Back</a></button>
</body>
</html>
""
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
    <title>Transaction History</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f8f8;
        }

        .navbar {
            background-color: #333;
            color: white;
            overflow: hidden;
        }

        .navbar a {
            float: left;
            display: block;
            padding: 14px 16px;
            text-decoration: none;
            color: white;
        }

        .navbar a:hover {
            background-color: #ddd;
            color: black;
        }

        .container {
            margin: 20px;
            padding: 20px;
            background-color: white;
            box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);
            border-radius: 5px;
        }

        h2 {
            color: #007bff;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th,
        td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
        }

        .pagination {
            display: flex;
            list-style-type: none;
            padding: 0;
        }

        .pagination li {
            margin: 0;
            padding: 0;
        }

        .pagination li a {
            display: block;
            padding: 5px 10px;
            text-decoration: none;
            border: 1px solid #ccc;
            margin-right: 5px;
            /* Add some spacing between items */
        }

        .pagination li.active a {
            background-color: #007bff;
            color: white;
        }
    </style>
</head>

<body>
    <div class="navbar">
        <!-- Your navigation bar links and profile info -->
    </div>

    <div class="container">
        <h2>Transaction History</h2>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="transaction : ${transactions}">
                    <td th:text="${transaction.timestamp}"></td>
                    <td th:text="${transaction.type}"></td>
                    <td th:text="${transaction.amount}"></td>
                </tr>
            </tbody>
        </table>

        <nav th:if="${totalPages > 1}">
            <ul class="pagination">
                <li th:each="pageNumber : ${#numbers.sequence(0, totalPages - 1)}"
                    th:class="${pageNumber == currentPage ? 'active' : ''}">
                    <a th:href="@{/transaction-history(page=${pageNumber})}" th:text="${pageNumber + 1}"></a>
                </li>
            </ul>
        </nav>
        <button><a th:href="@{/welcome}">Back</a></button>
    </div>
</body>

</html>
"welcome.html"
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
    <title>Online Banking System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            /* background-image: url('background.jpg'); */
            background-image: url('/images/background.jpg');

            background-size: cover;

        }

        h2 {
            color: red;
        }

        .navbar {
            background-color: #333;
            overflow: hidden;
        }

        .navbar a {
            float: left;
            display: block;
            color: white;
            text-align: center;
            padding: 14px 16px;
            text-decoration: none;
        }
        .navbar a:hover {
            background-color: #ddd;
            color: black;
        }
        .profile {
            float: left;
            display: flex;
            align-items: center;
            margin-right: 20px;
        }
        .profile-picture {
            width: 40px;
            height: 40px;
            background-color: #007bff;
            color: #fff;
            text-align: center;
            line-height: 40px;
            font-size: 20px;
            margin-top: 5px;
            margin-bottom: 5px;
            border-radius: 50%;

        }
    </style>
</head>

<body>
    <div class="navbar">

        <a th:href="@{/welcome}">Home</a>
        <a th:href="@{/createaccount}">Create Account</a>
        <a th:href="@{/AccountDetails1}">View Accounts</a>
        <a th:href="@{/payment-transfer}">Payment Transfer</a>
        <a th:href="@{/transaction-history}">Transactions</a>
        <!-- <a th:href="@{/transactions}">Transactions</a> -->

        <div class="profile" style="float: right;">
            <div class="profile-picture"> <span th:text="${username.substring(0,2).toUpperCase()}"></span></div>
        </div>

        <a th:href="@{/login}" style="float: right;">Logout</a>


    </div>

    <div class="container">
        <h2>Welcome to Online Banking System , <span th:text="${username}"></span></h2>
        <!-- Add more content and components here -->
        <!-- <h2>Welcome, <span th:text="${username}"></span></h2> -->
        <!-- Other welcome page content -->

    </div>

    <script>
       
    </script>
</body>

</html>
